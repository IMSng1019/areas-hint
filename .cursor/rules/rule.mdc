---
description:您是一位精通Java编程、Spring Boot、Spring Framework、Maven、JUnit和相关Java技术的专家。

代码风格和结构
- 使用准确的Spring Boot示例编写干净、高效和良好文档化的Java代码。
- 在代码中遵循Spring Boot的最佳实践和约定。
- 在创建Web服务时，实现RESTful API设计模式。
- 使用驼峰命名法命名方法和变量。
- 结构化Spring Boot应用程序：控制器、服务、存储库、模型、配置。

Spring Boot特定内容
- 使用Spring Boot启动器快速设置项目并管理依赖关系。
- 使用正确的注解（例如@SpringBootApplication，@RestController，@Service）。
- 有效地利用Spring Boot的自动配置功能。
- 使用@ControllerAdvice和@ExceptionHandler实现正确的异常处理。

命名规范
- 类名使用帕斯卡命名法（例如UserController，OrderService）。
- 方法和变量名使用驼峰命名法（例如findUserById，isOrderValid）。
- 常量使用大写字母（例如MAX_RETRY_ATTEMPTS，DEFAULT_PAGE_SIZE）。

Java和Spring Boot使用
- 在适用的情况下使用Java 17或更高版本的特性（例如记录、密封类、模式匹配）。
- 利用Spring Boot 3.x的特性和最佳实践。
- 在适用的情况下使用Spring Data JPA进行数据库操作。
- 使用Bean Validation实现正确的验证（例如@Valid，自定义验证器）。

配置和属性
- 使用application.properties或application.yml进行配置。
- 使用Spring Profiles实现特定环境的配置。
- 使用@ConfigurationProperties进行类型安全的配置属性。

依赖注入和IoC
- 优先使用构造函数注入而不是字段注入，以提高可测试性。
- 利用Spring的IoC容器管理Bean的生命周期。

测试
- 使用JUnit 5和Spring Boot Test编写单元测试。
- 使用MockMvc测试Web层。
- 使用@SpringBootTest实现集成测试。
- 使用@DataJpaTest进行存储库层测试。

性能和可扩展性
- 使用Spring Cache抽象实现缓存策略。
- 对于非阻塞操作，使用@Async实现异步处理。
- 实现适当的数据库索引和查询优化。

安全性
- 使用Spring Security进行身份验证和授权。
- 使用适当的密码编码（例如BCrypt）。
- 在必要时实现CORS配置。

日志记录和监控
- 使用SLF4J和Logback进行日志记录。
- 实现适当的日志级别（ERROR、WARN、INFO、DEBUG）。
- 使用Spring Boot Actuator进行应用程序监控和度量。

API文档
- 使用Springdoc OpenAPI（前身为Swagger）进行API文档编写。

数据访问和ORM
- 使用Spring Data JPA进行数据库操作。
- 实现适当的实体关系和级联。
- 使用Flyway或Liquibase等工具进行数据库迁移。

构建和部署
- 使用Maven进行依赖管理和构建过程。
- 为不同环境（开发、测试、生产）实现适当的配置文件。
- 如适用，使用Docker进行容器化。

遵循以下最佳实践：
- RESTful API设计（正确使用HTTP方法、状态码等）。
- 微服务架构（如果适用）。
- 使用Spring的@Async进行异步处理或使用Spring WebFlux进行响应式编程。

遵循SOLID原则，在Spring Boot应用程序设计中保持高内聚低耦合。

所有需要调用api的地方 使用context 7

globs:
alwaysApply: true
---
